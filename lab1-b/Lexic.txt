Alphabet:

a. Upper (A-Z) and lower case letters (a-z) of the English alphabet

       b. Underline character '_';

       c. Decimal digits (0-9);


Lexic:

      a.Special symbols, representing:

- operators + ++ - -- * ^ / != < <= = == >=

- separators ( ) [ ] { } , ; space

- reserved words:

    defined func array char const for else if integer boolean return while return READ WRITE
 PRINT mod and or

      b.identifiers

  -a sequence of letters and  digits, such that the first character is a letter; the rule is:

    identifier ::= letter | letter{letter}{digit}

    letter ::= "A" | "B" | . ..| "Z"

    digit ::= "0" | "1" |...| "9"


      c.constants

1.integer - rule:

      noconst:="+"no|"-"no|no

      no:=digit{no}

2.character

    character:='letter'|'digit'

3.string

      constchar:="string"

      string:=char{string}

      char:=letter|digit

//Lexic.txt seems mostly good and decently comprehensive, however a couple of issues I can see are as follows:
//  - Under the operators section, you're missing the "^" operator you utilized in p1 to represent the exponentiation operation; additionally, you have the ":=" operator listed, which does not show up in your //  code; Finally, you're missing the "!=" inequality operator.
//  - Under the separators section, you're missing the comma "," symbol, which you're using in your code for function argument enumeration.
//  - The reserved words, identifiers and constant rules all seem to be perfectly in order.
